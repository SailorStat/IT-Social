{"version":3,"sources":["hoc/withLoginRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Message/Message.module.css","components/MessageList/MessageList.module.css","components/AddresseeList/AddresseeList.module.css","components/Addressee/Addressee.module.css","components/Message/Message.jsx","components/MessageList/MessageList.jsx","components/MessageList/MessageListContainer.jsx","components/Addressee/Addressee.jsx","components/AddresseeList/AddresseeList.jsx","redux/selectors/dialogs-selector.js","components/AddresseeList/AddresseeListContainer.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isLoggedIn","getIsLoggedIn","mapDispatchToProps","withLoginRedirect","Component","connect","props","to","module","exports","Message","fromCurrentUser","className","s","message","outgoing","message__date","date","message__data","loginUser","message__author","fullName","message__text","userPhoto","Avatar","avatar","userid","checkedDialog","usersArr","MessageList","messageLibrary","getProfileUser","getMessageList","interlocutorId","match","params","interlocutor","currentAddressee","users","some","user","userId","el","push","filter","useEffect","messagesData","message__container","map","messageId","MessageListContainer","compose","usersPage","dialogs","dialogsPage","loginUserId","getCurrentUserId","withRouter","Addressee","exact","onClick","setCheckedDialog","dialogsitem__title","activeClassName","checked","AddresseeList","dialogs__inner","getDialogValueText","dialogValueText","getDialogs","AddresseeListContainer","Dialogs","pullDialogs","messages__inner","TextCreator","placeholderText","getText","setText","setDialogValueText","addBlock","postMessage","getCurrentUserPhoto","loginPage","name"],"mappings":"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","file":"static/js/3.b9522c29.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\";\r\nimport { getIsLoggedIn } from '../redux/selectors/user-selector';\r\n\r\nconst mapStateToPropsForRedirect = state => {\r\n  return {\r\n    isLoggedIn: getIsLoggedIn(state)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\nconst withLoginRedirect = (Component) => {\r\n  const RedirectComponent = (props) => {\r\n    if (props.isLoggedIn) return <Component {...props}/>\r\n    return <Redirect to={\"/login\"}/>\r\n  }\r\n\r\n  return connect(mapStateToPropsForRedirect, mapDispatchToProps)(RedirectComponent)\r\n}\r\n  \r\n\r\nexport default withLoginRedirect","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__etPsl\",\"messages__inner\":\"Dialogs_messages__inner__1-dbS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__TUbjs\",\"outgoing\":\"Message_outgoing__3e6a5\",\"userPhoto\":\"Message_userPhoto__2IJ7h\",\"message__data\":\"Message_message__data__F1XXE\",\"message__author\":\"Message_message__author__1Qj2E\",\"message__text\":\"Message_message__text__2SPNz\",\"message__date\":\"Message_message__date__BILWO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message__container\":\"MessageList_message__container__TjAMP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs__inner\":\"AddresseeList_dialogs__inner__1-orJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsitem__title\":\"Addressee_dialogsitem__title__3Onpr\",\"checked\":\"Addressee_checked__1qkC7\"};","import s from \"./Message.module.css\"\r\nimport Avatar from \"../../loc/Avatar/Avatar\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Message = (props) => {\r\n  if (props.fromCurrentUser) {\r\n    return (\r\n      <div className={s.message + \" \" + s.outgoing}>\r\n        <div className={s.message__date + \" \" + s.outgoing}>{props.date}</div>\r\n        <div className={s.message__data + \" \" + s.outgoing}>\r\n          <NavLink to={\"/profile/\" + props.loginUser} className={s.message__author + \" \" + s.outgoing}>{props.fullName}</NavLink>\r\n          <div className={s.message__text + \" \" + s.outgoing}>{props.message}</div>\r\n        </div>\r\n        <div className={s.userPhoto + \" \" + s.outgoing}>\r\n          <Avatar avatar={props.userPhoto} userid={props.loginUser}/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <div className={s.message}>\r\n      <div className={s.userPhoto}>\r\n          <Avatar avatar={props.userPhoto} userid={props.checkedDialog}/>\r\n      </div>\r\n      <div className={s.message__data}>\r\n        <NavLink to={\"/profile/\" + props.checkedDialog} className={s.message__author + \" \" + s.outgoing}>{props.fullName}</NavLink>\r\n        <div className={s.message__text}>{props.message}</div>\r\n      </div>\r\n      <div className={s.message__date}>\r\n        {props.date}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message","import Message from '../Message/Message';\r\nimport s from \"./MessageList.module.css\"\r\nimport { useEffect } from \"react\";\r\n\r\nlet usersArr = []\r\n\r\nconst MessageList = ({ messageLibrary, getProfileUser, getMessageList, ...props }) => {\r\n  const interlocutorId = +props.match.params.interlocutor\r\n  const hasUser = props.users.some(user => user.userId === +interlocutorId)\r\n  let currentAddressee = \"\"\r\n  if (hasUser && !usersArr.some(el => el === interlocutorId)) {\r\n    usersArr.push(interlocutorId)\r\n    currentAddressee = [...props.users].filter(user => user.userId === +interlocutorId)[0]\r\n    getMessageList(interlocutorId, currentAddressee)\r\n  }\r\n  \r\n  useEffect(() => getProfileUser(interlocutorId), [getProfileUser, interlocutorId])\r\n\r\n  const messagesData = messageLibrary[interlocutorId]?.messagesData || []\r\n  return (\r\n    <div className={s.message__container}>\r\n      {messagesData.map(el => <Message key={el.messageId}\r\n                                       userPhoto={el.userPhoto}\r\n                                       fullName={el.fullName} \r\n                                       fromCurrentUser={el.fromCurrentUser}\r\n                                       message={el.message}\r\n                                       date={el.date}\r\n                                       loginUser={props.loginUser}\r\n                                       checkedDialog={props.interlocutorId}/>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MessageList","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { getCurrentUserId } from \"../../redux/selectors/user-selector\";\r\nimport MessageList from \"./MessageList\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { getMessageList, getProfileUser } from \"./../../redux/redux-store\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state.usersPage.users,\r\n    dialogs: state.dialogsPage.dialogs,\r\n    loginUserId: getCurrentUserId(state),\r\n    messageLibrary: state.dialogsPage.messageLibrary\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { getMessageList, getProfileUser }\r\n\r\nconst MessageListContainer = compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRouter\r\n)(MessageList)\r\n\r\nexport default MessageListContainer","import s from \"./Addressee.module.css\"\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Addressee = (props) => {\r\n  return (\r\n    <NavLink exact to={\"/dialogs/\" + props.userId} onClick={props.setCheckedDialog} userid={props.userId} className={s.dialogsitem__title} activeClassName={s.checked}>\r\n      {props.fullName}\r\n    </NavLink>\r\n  )\r\n}\r\n\r\nexport default Addressee","import s from \"./AddresseeList.module.css\"\r\nimport Addressee from \"../Addressee/Addressee\";\r\n\r\nconst AddresseeList = (props) => {\r\n  return (\r\n    <div className={s.dialogs__inner}>\r\n      {props.dialogs.map(el => (\r\n        <Addressee key={\"Addressee\" + el.userId} fullName={el.fullName} userId={el.userId} setCheckedDialog={props.setCheckedDialog}/>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddresseeList","export const getDialogValueText = (state) => {\r\n  return state.dialogsPage.dialogValueText\r\n}\r\n\r\nexport const getDialogs = (state) => {\r\n  return state.dialogsPage.dialogs\r\n}\r\n","import { connect } from \"react-redux\";\r\nimport AddresseeList from \"./AddresseeList\";\r\nimport { setCheckedDialog } from \"../../redux/redux-store\";\r\nimport { getDialogs } from \"../../redux/selectors/dialogs-selector\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dialogs: getDialogs(state)\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { setCheckedDialog }\r\n\r\nconst AddresseeListContainer = connect(mapStateToProps, mapDispatchToProps)(AddresseeList)\r\n\r\nexport default AddresseeListContainer","import s from \"./Dialogs.module.css\"\r\nimport TextCreator from \"../../loc/TextCreator/TextCreator\";\r\nimport MessageListContainer from \"../MessageList/MessageListContainer\";\r\nimport AddresseeListContainer from \"../AddresseeList/AddresseeListContainer\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Dialogs = ({pullDialogs, ...props}) => {\r\n  const interlocutorId = props.match.params.interlocutor\r\n  const sendMessage = () => {\r\n    props.postMessage(interlocutorId, props.getText)\r\n  }\r\n  useEffect(pullDialogs, [pullDialogs])\r\n\r\n  return (\r\n    <div className={\"content__wrapper \" + s.dialogs}>\r\n      <AddresseeListContainer />\r\n      \r\n      {\r\n        interlocutorId && (\r\n          <div className={s.messages__inner}>\r\n            <MessageListContainer />\r\n            <TextCreator placeholderText=\"Enter your message..\"\r\n                        getText={props.getText}\r\n                        setText={props.setDialogValueText}\r\n                        addBlock={sendMessage}\r\n                        userPhoto={props.userPhoto}\r\n                        fullName={props.fullName}\r\n                        userid={props.userId}\r\n            />\r\n          </div>\r\n        )\r\n      }\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs","import Dialogs from \"./Dialogs\";\r\nimport { postMessage, setDialogValueText, pullDialogs } from \"../../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport withLoginRedirect from \"../../hoc/withLoginRedirect\";\r\nimport { compose } from \"redux\";\r\nimport { getCurrentUserId, getCurrentUserPhoto } from \"../../redux/selectors/user-selector\";\r\nimport { getDialogValueText } from \"./../../redux/selectors/dialogs-selector\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    getText: getDialogValueText(state),\r\n    userPhoto: getCurrentUserPhoto(state),\r\n    userId: getCurrentUserId(state),\r\n    fullName: state.loginPage.loginUser.name\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = { setDialogValueText, postMessage, pullDialogs}\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withRouter,\r\n  withLoginRedirect\r\n)(Dialogs)"],"sourceRoot":""}